{"version":3,"sources":["logo.svg","serviceWorker.js","components/main.jsx","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Counter","props","state","videoURL","videoFILE","onSubmit","bind","onUpload","e","preventDefault","this","url","console","log","source","String","axios","post","link","then","response","alert","data","catch","error","file","Fragment","className","href","type","ref","a","name","onClick","Component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,kC,8LCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,iDCiESC,G,wDAzEb,WAAYC,GAAQ,IAAD,8BACjB,gBALFC,MAAQ,CACNC,SAAU,8CACVC,UAAW,MAIX,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAKC,SAAW,EAAKA,SAASD,KAAd,gBAHC,E,qDAKVE,GACPA,EAAEC,iBACFC,KAAKR,MAAMC,SAAWO,KAAKC,IAC3BC,QAAQC,IAAIH,KAAKR,MAAMC,UACvB,IAAMW,EAASC,OAAOL,KAAKR,MAAMC,UAEjCa,IACGC,KAAK,mDAAoD,CACxDC,KAAMJ,IAEPK,MAAK,SAACC,GACLC,MAAMD,EAASE,KAAT,SAEPC,OAAM,SAACC,GACNZ,QAAQC,IAAIW,GACZH,MAAM,uB,+BAIHb,GACPA,EAAEC,iBACFC,KAAKR,MAAME,UAAYM,KAAKe,KAC5Bb,QAAQC,IAAIH,KAAKR,MAAME,WACvBY,IACGC,KACC,mDACAP,KAAKR,MAAME,WAEZe,MAAK,SAACC,GACLR,QAAQC,IAAIO,GACZC,MAAM,cAEPE,OAAM,SAACC,GACNH,MAAM,uB,+BAIF,IAAD,OACP,OACE,kBAAC,IAAMK,SAAP,KACE,yBAAKC,UAAU,gCACb,uBAAGA,UAAU,eAAeC,KAAK,KAC9B,IADH,WAEW,MAGb,2DACA,wDACA,0BAAMD,UAAU,mBACb,IACD,2BAAOE,KAAK,MAAMC,IAAK,SAACC,GAAD,OAAQ,EAAKpB,IAAMoB,GAAIC,KAAK,SAErD,4BAAQH,KAAK,SAASI,QAASvB,KAAKL,SAAUsB,UAAU,SAAxD,UAGA,6DACA,0BAAMA,UAAU,mBACb,IACD,2BAAOE,KAAK,OAAOC,IAAK,SAACC,GAAD,OAAQ,EAAKN,KAAOM,GAAIC,KAAK,UAEvD,4BAAQH,KAAK,iBAAiBI,QAASvB,KAAKH,SAAUoB,UAAU,SAAhE,e,GAtEcO,cCEtBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SFwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdrB,OAAM,SAAAC,GACLZ,QAAQY,MAAMA,EAAMqB,c","file":"static/js/main.ab32d340.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport * as util from \"util\";\r\n\r\nconst theServer = \"https://videoquizconverter.herokuapp.com/quizzes\"; // For API\r\nclass Counter extends Component {\r\n  state = {\r\n    videoURL: \"https://www.youtube.com/watch?v=QN-jeJLGCio\", // default video\r\n    videoFILE: null,\r\n  };\r\n  constructor(props) {\r\n    super();\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n    this.onUpload = this.onUpload.bind(this);\r\n  }\r\n  onSubmit(e) {\r\n    e.preventDefault();\r\n    this.state.videoURL = this.url;\r\n    console.log(this.state.videoURL);\r\n    const source = String(this.state.videoURL);\r\n    //  axios.post(\"api/uploadfile\", this.state.videoURL);\r\n    axios\r\n      .post(\"https://videoquizconverter.herokuapp.com/quizzes\", {\r\n        link: source,\r\n      })\r\n      .then((response) => {\r\n        alert(response.data[\"Quiz\"]);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        alert(\"Error with API\");\r\n      });\r\n    // console.log(result);\r\n  }\r\n  onUpload(e) {\r\n    e.preventDefault();\r\n    this.state.videoFILE = this.file;\r\n    console.log(this.state.videoFILE);\r\n    axios\r\n      .post(\r\n        \"https://videoquizconverter.herokuapp.com/quizzes\",\r\n        this.state.videoFILE\r\n      )\r\n      .then((response) => {\r\n        console.log(response);\r\n        alert(\"Success\");\r\n      })\r\n      .catch((error) => {\r\n        alert(\"Error with API\");\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <nav className=\"navbar navbar-light bg-light\">\r\n          <a className=\"navbar-brand\" href=\"#\">\r\n            {\" \"}\r\n            About Us{\" \"}\r\n          </a>\r\n        </nav>\r\n        <h1> WELCOME TO QUIZLET FINDER </h1>\r\n        <h3> Submit Video URL Here: </h3>\r\n        <form className=\"form-horizontal\">\r\n          {\" \"}\r\n          <input type=\"url\" ref={(a) => (this.url = a)} name=\"url\"></input>\r\n        </form>\r\n        <button type=\"button\" onClick={this.onSubmit} className=\"btn-2\">\r\n          Submit\r\n        </button>\r\n        <h3> Submit Video mp4 File Here: </h3>\r\n        <form className=\"form-horizontal\">\r\n          {\" \"}\r\n          <input type=\"file\" ref={(a) => (this.file = a)} name=\"file\"></input>\r\n        </form>\r\n        <button type=\"btn-horizontal\" onClick={this.onUpload} className=\"btn-2\">\r\n          Upload\r\n        </button>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counter;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Counter from \"./components/main\";\nReactDOM.render(\n  <React.StrictMode>\n    <Counter />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}